function sendMessage(e,t,o){var l=JSON.stringify(t);mb.sendMessage(e,l,o)}function receiveMessage(e,t,o){decodedData=decodeURIComponent(o),console.log("DecodedData::::"+decodedData);var l=JSON.parse(decodedData),n=l.component,a=l.nameSpace,r=l.value,s=l.options,i=l.method,c=l.eventType;console.log("component is::::"+n),console.log("namespace is::::"+a),console.log("value is:::: "+r),console.log("options is:::: "+s),console.log("method is:::: "+i),console.log("eventType is:::: "+c);var u="";u=null==a||0==a.length?n:n+"."+a;var d=getCurrentObject(n,a);if(null!=i&&"clear"===i){var g=s||null;console.log("Received Delete method call for NodeLevel = "+u+", leaf = "+d.isLeaf()),g?handleDeleteWithOptions(u,s,d.isLeaf(),d.isArray,d.isMap):handleDeleteWithNoOptions(u,d.isLeaf())}else if(d.isArray&&null!=r)console.log("Received component is of Array Type"),setItemsOfArrayType(u,r,s);else{console.log("Received component is of non Array Type");for(attrKey in r){attrVal=r[attrKey],console.log("ATTRIBUTE KEY::  "+attrKey),console.log("ATTRIBUTE VALUE::  "+attrVal);var f="";f=null==a||""==a?attrKey:a+"."+attrKey;var b=getCurrentObject(n,f);if(null!=b)if(b.isArray){var p=u+"."+attrKey;setItemsOfArrayType(p,attrVal,s)}else setItemsOfLeafOrNonLeafType(d,attrKey,attrVal);else console.log("Unable to get the current object for "+n+"."+f)}}executeSubscriptionCallbackForParentChild(u,r)}function getCurrentObject(e,t){var o=drive[e];if(null==t||0==t.length)return o;if(-1==t.indexOf("."))return o[t];for(var l=t.split("."),n=0;n<l.length;n++){var a=l[n];o=o[a]}return o}function executeSubscriptionCallbackForParentChild(e,t){console.log("Executing executeSubscriptionCallbackForParentChild for node::::"+e);for(var o=e.split("."),l="",n=t,a=o.length-1;a>=0;a--)if(console.log("Printing Node Value:::"+o[a]),a==o.length-1)executeSubscriptionCallbackAfterSet(e,t),l=e;else{var r=l.substring(l.lastIndexOf(".")+1),s={};s[r]=n,l=l.substring(0,l.lastIndexOf(".")),console.log("Execute Node :::::::"+l),console.log("NODE value to be sent"+JSON.stringify(s)),executeSubscriptionCallbackAfterSet(l,s),n=s}}function executeSubscriptionCallbackAfterSet(handle,value){var subscriptionHandle=createSubscriptionHandle(handle),isAlreadySubscribed=checkLocalSubscriptions(subscriptionHandle);if(isAlreadySubscribed){var fn=eval("("+localStorage.getItem(subscriptionHandle)+")");fn.call(null,value,EventType.GET)}else console.log("Component is not subscribed yet.So not sending subscription callback")}var connectionType="mbbridge";mb.setReceiveCallback("receiveMessage");